syntax = "proto3";
option java_multiple_files = true;
package com.github.saiprasadkrishnamurthy.ruler.rpc;

import "google/protobuf/any.proto";

message RuleAudit {
   string transactionId = 1;
   string ruleName = 2;
   string ruleType = 3;
   bool result = 4;
   int64 timestamp = 5;
   repeated string overrideFor = 6;
   string alternateFor = 7;
   bool enabled = 8;
   int64 timeTakenInMillis = 9;
}
message RuleEvaluationContext {
    string transactionId = 1;
    repeated string unmatchedRules = 2;
    repeated string matchedRules = 3;
    repeated string resultantRules = 4;
    repeated string preconditionFailedRules = 5;
    repeated RuleAudit audits = 6;
}

message RuleExecutionRequest {
    string transactionId = 1;
    map<string,google.protobuf.Any> metadata = 2;
    map<string,google.protobuf.Any> selectionAttributes = 3;
    string payloadJson = 4;
    enum RuleModeType {
        Live = 0;
        Preview = 1;
      }
    RuleModeType ruleModeType = 5;
    string precondition = 6;
}

message RuleExecutionResponse {
    string transactionId = 1;
    map<string, string> ruleNameContentMapping = 2;
    RuleEvaluationContext context = 3;
}

message Rule {
   string name = 1;
   string description = 2;
   string author = 3;
   string category = 4;
   int64 created = 5;
   int64 lastModified = 6;
   bool enabled = 7;
   enum RuleModeType {
           Live = 0;
           Preview = 1;
         }
   RuleModeType ruleModeType = 8;
   int32 priority = 9;
   enum RuleType {
       Primary = 0;
       Alternate = 1;
       Override = 2;
     }
   RuleType ruleType = 10;
   string condition = 11;
   string alternateFor = 12;
   repeated string overrideFor = 13;
   string metadataJson = 14;
   string selectionAttributesJson = 15;
   repeated string actions = 16;
   string content = 17;
}

message RuleSet {
   string name = 1;
   string description = 2;
   string author = 3;
   string category = 4;
   int64 created = 5;
   int64 lastModified = 6;
   bool enabled = 7;
   enum RuleModeType {
           Live = 0;
           Preview = 1;
         }
   RuleModeType ruleModeType = 8;
   int32 priority = 9;
   enum RuleType {
       Primary = 0;
       Alternate = 1;
       Override = 2;
     }
   RuleType ruleType = 10;
   string condition = 11;
   string alternateFor = 12;
   repeated string overrideFor = 13;
   string metadataJson = 14;
   string selectionAttributesJson = 15;
   repeated SubRule rules = 16;
}

message SubRule {
   string condition = 1;
   bool enabled = 2;
   repeated string actions = 3;
   string content = 4;
}

message Identifier {
    string id = 1;
}

service RuleExecutionService {
    rpc execute(RuleExecutionRequest) returns (RuleExecutionResponse);
}

service RuleManagementService {
    rpc createRule(Rule) returns (Identifier);
    rpc getRule(Identifier) returns (Rule);
    rpc createRuleSet(RuleSet) returns (Identifier);
    rpc getRuleSet(Identifier) returns (RuleSet);
}